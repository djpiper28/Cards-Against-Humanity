// Code generated by tygo. DO NOT EDIT.

//////////
// source: card.go

export interface WhiteCard {
  id: number /* int */;
  bodyText: string;
}
export interface BlackCard {
  id: number /* int */;
  bodyText: string;
  cardsToPlay: number /* uint */;
}

//////////
// source: card_deck.go

export interface CardDeck {
  WhiteCards: (WhiteCard | undefined)[];
  BlackCards: (BlackCard | undefined)[];
}

//////////
// source: card_pack.go

export interface CardPack {
  id: string /* uuid */;
  name: string;
  whiteCards: number /* int */;
  blackCards: number /* int */;
}

//////////
// source: game.go

/**
 * Idk why you would only play one round, but okay
 */
export const MinRounds = 1;
/**
 * Bro going to go mad after 100 rounds
 */
export const MaxRounds = 100;
/**
 * Shit game at 1
 */
export const MinPlayingToPoints = 2;
export const MaxPlayingToPoints = 50;
export const MaxPasswordLength = 50;
export const MinPlayers = 3;
export const MaxPlayers = 20;
export const MinCardPacks = 1;
export const HandSize = 7;
/**
 * Game settings used for the internal state and game creation
 */
export interface GameSettings {
  /**
   * Game ends when this amount of rounds is reached
   */
  maxRounds: number /* uint */;
  /**
   * Game ends when someone reaches this amount of points
   */
  playingToPoints: number /* uint */;
  /**
   * Allows a game to have a password, this will be stored in plaintext like a chad
   * Empty string is no password
   */
  gamePassword: string;
  maxPlayers: number /* uint */;
  cardPacks: (CardPack | undefined)[];
}
export type GameState = number /* int */;
export const GameStateInLobby: GameState = 0 + 1;
export const GameStateWhiteCardsBeingSelected: GameState = 1 + 1;
export const GameStateCzarJudgingCards: GameState = 2 + 1;
export const GameStateDisplayingWinningCard: GameState = 3 + 1;
export interface Game {
  Id: string /* uuid */;
  Players: string /* uuid */[];
  PlayersMap: { [key: string /* uuid */]: Player | undefined};
  CurrentCardCzarId: string /* uuid */;
  GameOwnerId: string /* uuid */;
  CurrentRound: number /* uint */;
  Settings?: GameSettings;
  CurrentBlackCard?: BlackCard;
  CardDeck?: CardDeck;
  CreationTime: string /* RFC3339 */;
  GameState: GameState;
}
/**
 * Information that the client sees about a game
 */
export interface GameInfo {
  id: string /* uuid */;
  playerCount: number /* int */;
  maxPlayers: number /* uint */;
  playingTo: number /* uint */;
  hasPassword: boolean;
}

//////////
// source: player.go

export interface Player {
  Id: string /* uuid */;
  Name: string;
  Hand: { [key: number /* int */]: WhiteCard | undefined};
  CurrentPlay: (WhiteCard | undefined)[];
  Connected: boolean;
  Points: number /* int */;
}
export const MaxPlayerNameLength = 20;
export const MinPlayerNameLength = 3;
